import { Directive, Input, Inject, Optional } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { HIGHLIGHTJS_CONFIG } from './highlight-js.config';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
export class HighlightJsDirective {
    constructor(el, ngModel, doc, cog) {
        this.el = el;
        this.ngModel = ngModel;
        this.doc = doc;
        this.lang = 'html';
        this.mode = 'simple';
        Object.assign(this, cog);
    }
    escapeHTML(str) {
        return (str || '').replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&apos;');
    }
    init() {
        this.destroy();
        const el = this.el.nativeElement;
        const code = this.code || '' + el.innerHTML.trim();
        this.codeEl = this.doc.createElement(this.mode === 'default' ? 'div' : 'pre');
        const isSimple = this.mode === 'simple';
        if (isSimple) {
            if (this.lang) {
                this.codeEl.className = this.lang;
            }
            this.parentEl = el.parentNode;
            this.parentEl.insertBefore(this.codeEl, el.nextSibling);
        }
        else {
            this.parentEl = el;
            this.parentEl.innerHTML = ``;
            this.parentEl.appendChild(this.codeEl);
        }
        this.codeEl.innerHTML = code;
        hljs.configure({ ...this.options });
        if (isSimple) {
            hljs.highlightBlock(this.codeEl);
        }
        else {
            this.codeEl.querySelectorAll('pre code').forEach((block) => {
                hljs.highlightBlock(block);
            });
        }
    }
    destroy() {
        if (this.codeEl && this.parentEl) {
            this.parentEl.removeChild(this.codeEl);
            this.codeEl = undefined;
        }
    }
    ngAfterViewInit() {
        this.init();
        if (this.ngModel) {
            this.modelValue$ = this.ngModel.valueChanges?.subscribe((res) => {
                this.code = this.escapeHTML(res);
                this.init();
            });
        }
        else {
            this.initMutation();
        }
    }
    ngOnDestroy() {
        this.destroy();
        this.destroyMutation();
        if (this.modelValue$) {
            this.modelValue$.unsubscribe();
        }
    }
    initMutation() {
        if (typeof MutationObserver === 'undefined') {
            return;
        }
        this.observer = new MutationObserver(this.init.bind(this));
        this.observer.observe(this.el.nativeElement, {
            characterData: true,
            childList: true,
            subtree: true,
        });
    }
    destroyMutation() {
        if (!this.observer) {
            return;
        }
        this.observer.disconnect();
    }
}
HighlightJsDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: HighlightJsDirective, deps: [{ token: i0.ElementRef }, { token: i1.NgModel, optional: true }, { token: DOCUMENT }, { token: HIGHLIGHTJS_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.Directive });
HighlightJsDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.1.1", type: HighlightJsDirective, selector: "[highlight-js]", inputs: { options: "options", lang: "lang", code: "code", mode: "mode" }, host: { properties: { "style.display": "mode === 'simple' ? 'none' : null" } }, exportAs: ["highlightJs"], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: HighlightJsDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[highlight-js]',
                    host: {
                        '[style.display]': `mode === 'simple' ? 'none' : null`,
                    },
                    exportAs: 'highlightJs',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.NgModel, decorators: [{
                    type: Optional
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [HIGHLIGHTJS_CONFIG]
                }] }]; }, propDecorators: { options: [{
                type: Input
            }], lang: [{
                type: Input
            }], code: [{
                type: Input
            }], mode: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,